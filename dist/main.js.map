{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todo-list/./src/_createListItem.js","webpack://todo-list/./src/_Task.js","webpack://todo-list/./src/_ToDoList.js","webpack://todo-list/./src/index.js"],"sourcesContent":["/**\n * * Function to create HTMLElement with class\n * @param {string} tag - HTML tag name\n * @param {(string|[string])} className - HTML class for the element\n * @returns {HTMLElement}\n */\nconst createHtmlElementWithClass = (tagName, className) => {\n  const tag = document.createElement(tagName);\n  if (!className) return tag;\n  if (Array.isArray(className)) {\n    tag.classList.add(...className);\n  } else {\n    tag.classList.add(className);\n  }\n  return tag;\n};\n\n/**\n * *Function to render each task\n * @param {string} description - description of the activity\n * @param {number} index - number in the task array\n * @returns {HTMLElement}\n */\nconst createListItem = (description, estatus, index) => {\n  const li = createHtmlElementWithClass('li', 'task-container');\n\n  const descriptionDiv = createHtmlElementWithClass('div', 'task-description');\n\n  let labelClass = ['task-label'];\n  if (estatus) {\n    labelClass.push('crossed');\n  }\n\n  const checkbox = createHtmlElementWithClass('input', 'checkbox');\n  checkbox.setAttribute('type', 'checkbox');\n  checkbox.checked = estatus;\n  checkbox.setAttribute('name', `checkbox${index}`);\n  descriptionDiv.appendChild(checkbox);\n\n  const label = createHtmlElementWithClass('label', labelClass);\n  label.id = `label${index}`;\n  label.textContent = description;\n  descriptionDiv.appendChild(label);\n\n  const text = createHtmlElementWithClass('input', ['task-input', 'hidden']);\n  text.setAttribute('type', 'text');\n  text.id = `description${index}`;\n  descriptionDiv.appendChild(text);\n\n  li.appendChild(descriptionDiv);\n\n  const iconsDiv = createHtmlElementWithClass('div', 'task-icons');\n\n  const dragIndicator = createHtmlElementWithClass('span', [\n    'material-icons',\n    'drag-icon',\n    'hidden',\n  ]);\n  dragIndicator.textContent = 'more_vert';\n  iconsDiv.appendChild(dragIndicator);\n\n  const deleteIcon = createHtmlElementWithClass('span', [\n    'material-icons',\n    'delete-icon',\n  ]);\n  deleteIcon.textContent = 'delete';\n  iconsDiv.appendChild(deleteIcon);\n\n  li.appendChild(iconsDiv);\n\n  return li;\n};\n\nexport default createListItem;\n","export default class Task {\n  constructor(description, index, estatus, id) {\n    this.description = description;\n    this.estatus = estatus;\n    this.index = index;\n    this.id = id;\n  }\n}\n","import Task from './_Task.js';\n\nexport default class ToDoList {\n  constructor() {\n    this.array = [];\n  }\n\n  add(description, estatus = false) {\n    const pos = this.array.length;\n    const task = new Task(description, pos, estatus, `id.${pos}`);\n    this.array.push(task);\n    this.reid();\n    this.set();\n  }\n\n  statusUpdate(index, newEstatus) {\n    this.array.forEach((element) => {\n      if (element.id === `id.${index}`) {\n        element.estatus = newEstatus;\n      }\n      this.set();\n    });\n  }\n\n  descriptionUpdate(index, description) {\n    this.array.forEach((element) => {\n      if (element.id === `id.${index}`) {\n        element.description = description;\n      }\n    });\n    this.set();\n  }\n\n  removeOnce(index) {\n    this.array = this.array.filter((element) => {\n      if (element.id !== `id.${index}`) {\n        return element;\n      }\n    });\n    this.reindex();\n    this.set();\n  }\n\n  removeCompleted() {\n    this.array = this.array.filter((element) => {\n      if (element.estatus === false) {\n        return element;\n      }\n    });\n    this.reindex();\n    this.reid();\n    this.set();\n  }\n\n  reindex() {\n    if (this.array.length > 0) {\n      this.array.forEach((element, index) => {\n        element.index = index;\n      });\n    }\n  }\n\n  reid() {\n    if (this.array.length > 0) {\n      this.array.forEach((element, index) => {\n        element.id = `id.${index}`;\n      });\n    }\n  }\n\n  /* eslint-disable */\n  set() {\n    localStorage.setItem('toDoList', JSON.stringify(this.array));\n  }\n\n  static get() {\n    if (!JSON.parse(localStorage.getItem('toDoList'))) {\n      this.array = [];\n    } else {\n      this.array = JSON.parse(localStorage.getItem('toDoList'));\n    }\n    return this.array;\n  }\n}\n","import './styles.scss';\nimport createListItem from './_createListItem.js';\nimport ToDoList from './_ToDoList.js';\n\n/**\n * *Variable declaration\n */\nconst newTask = document.querySelector('#todo-input');\nconst clearAllButton = document.querySelector('button');\nconst list = new ToDoList();\n\n/**\n * *Auxiliar function to empty a node\n * @param {node} parentNode - to be emptied\n */\nconst removeAllChildrenNodes = (parentNode) => {\n  while (parentNode.firstChild) {\n    parentNode.removeChild(parentNode.firstChild);\n  }\n};\n\n/**\n * *Auxiliar function to update object's status on memory\n * @param {HTMLElement} checkbox - to check estatus\n * @param {HTMLElement} label - to be manipulated\n */\nfunction checkStatus(checkbox, label) {\n  checkbox.forEach((element, index) => {\n    element.addEventListener('change', () => {\n      list.statusUpdate(index, checkbox[index].checked);\n      if (checkbox[index].checked === true) {\n        label[index].classList.add('crossed');\n      } else {\n        label[index].classList.remove('crossed');\n      }\n    });\n  });\n}\n\n/**\n * *Auxiliar function to toggle the same class between 2 different elements\n * @param {HTMLElement} elem1 - element to be added the new class\n * @param {HTMLElement} elem2 - element to be removed the class\n * @param {string} className - HTML class to interact\n */\nfunction toggleClassBetweenElements(elem1, elem2, className) {\n  elem1.classList.add(className);\n  elem2.classList.remove(className);\n}\n\n/**\n * *Function to render elements stored in local storage\n */\nwindow.onload = function reload() {\n  if (ToDoList.get().length > 0) {\n    const memoryList = ToDoList.get();\n    memoryList.forEach((task) => {\n      list.add(task.description, task.estatus);\n    });\n    renderElements(list.array);\n  }\n};\n\n/**\n * *Function to add new task\n */\nnewTask.addEventListener('keyup', (e) => {\n  e.preventDefault;\n  if (e.code === 'Enter' && newTask.value.trim() !== '') {\n    list.add(newTask.value);\n    newTask.value = '';\n    renderElements(list.array);\n  }\n});\n\n/**\n * *Function to render elements in HTML\n */\nfunction renderElements(object) {\n  const activitiesContainer = document.querySelector('#activities-container');\n  removeAllChildrenNodes(activitiesContainer);\n  object.forEach((task) => {\n    const activity = createListItem(task.description, task.estatus, task.index);\n    activitiesContainer.appendChild(activity);\n  });\n\n  const taskContainer = document.querySelectorAll('.task-container');\n  const checkbox = document.querySelectorAll('.checkbox');\n  const label = document.querySelectorAll('.task-label');\n  const text = document.querySelectorAll('.task-input');\n  const dragIcon = document.querySelectorAll('.drag-icon');\n  const deleteIcon = document.querySelectorAll('.delete-icon');\n\n  checkStatus(checkbox, label);\n\n  /**\n   * *Inner function to save changes and return to previous state\n   * @param {number} index - row of elements to modify\n   */\n  function returnAndSave(index) {\n    label[index].textContent = text[index].value;\n    list.descriptionUpdate(index, text[index].value);\n    taskContainer[index].classList.remove('edit');\n    toggleClassBetweenElements(text[index], label[index], 'hidden');\n  }\n\n  /**\n   * *Auxiliar function to modify and save values on each task\n   */\n  label.forEach((element, index) => {\n    element.addEventListener('click', () => {\n      taskContainer[index].classList.add('edit');\n      toggleClassBetweenElements(label[index], text[index], 'hidden');\n      text[index].value = label[index].textContent;\n      text[index].focus();\n    });\n  });\n  text.forEach((element, index) => {\n    element.addEventListener('focusout', () => {\n      returnAndSave(index);\n    });\n    element.addEventListener('keyup', (e) => {\n      e.preventDefault;\n      if (e.code === 'Enter' && text[index].value.trim() !== '') {\n        returnAndSave(index);\n      }\n    });\n  });\n\n  /**\n   * *Auxiliar function to delete an element\n   */\n  deleteIcon.forEach((element, index) => {\n    element.addEventListener('click', () => {\n      activitiesContainer.removeChild(taskContainer[index]);\n      list.removeOnce(index);\n    });\n  });\n}\n\nclearAllButton.addEventListener('click', () => {\n  list.removeCompleted();\n  renderElements(list.array);\n});\n"],"names":["createHtmlElementWithClass","tagName","className","tag","document","createElement","Array","isArray","classList","add","Task","description","index","estatus","id","this","ToDoList","array","pos","length","task","push","reid","set","newEstatus","forEach","element","filter","reindex","localStorage","setItem","JSON","stringify","parse","getItem","newTask","querySelector","clearAllButton","list","toggleClassBetweenElements","elem1","elem2","remove","renderElements","object","activitiesContainer","parentNode","firstChild","removeChild","removeAllChildrenNodes","activity","li","descriptionDiv","labelClass","checkbox","setAttribute","checked","appendChild","label","textContent","text","iconsDiv","dragIndicator","deleteIcon","createListItem","taskContainer","querySelectorAll","returnAndSave","value","descriptionUpdate","addEventListener","statusUpdate","checkStatus","focus","e","preventDefault","code","trim","removeOnce","window","onload","get","removeCompleted"],"sourceRoot":""}