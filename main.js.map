{"version":3,"file":"main.js","mappings":"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","sources":["webpack://todo-list/./src/_createListItem.js","webpack://todo-list/./src/_Task.js","webpack://todo-list/./src/_ToDoList.js","webpack://todo-list/./src/index.js"],"sourcesContent":["/**\r\n * * Function to create HTMLElement with class\r\n * @param {string} tag - HTML tag name\r\n * @param {(string|[string])} className - HTML class for the element\r\n * @returns {HTMLElement}\r\n */\r\nconst createHtmlElementWithClass = (tagName, className) => {\r\n  const tag = document.createElement(tagName);\r\n  if (!className) return tag;\r\n  if (Array.isArray(className)) {\r\n    tag.classList.add(...className);\r\n  } else {\r\n    tag.classList.add(className);\r\n  }\r\n  return tag;\r\n};\r\n\r\n/**\r\n * *Function to render each task\r\n * @param {string} description - description of the activity\r\n * @param {number} index - number in the task array\r\n * @returns {HTMLElement}\r\n */\r\nconst createListItem = (description, estatus, index) => {\r\n  const li = createHtmlElementWithClass('li', 'task-container');\r\n\r\n  const descriptionDiv = createHtmlElementWithClass('div', 'task-description');\r\n\r\n  const labelClass = ['task-label'];\r\n  if (estatus) {\r\n    labelClass.push('crossed');\r\n  }\r\n\r\n  const checkbox = createHtmlElementWithClass('input', 'checkbox');\r\n  checkbox.setAttribute('type', 'checkbox');\r\n  checkbox.checked = estatus;\r\n  checkbox.setAttribute('name', `checkbox${index}`);\r\n  descriptionDiv.appendChild(checkbox);\r\n\r\n  const label = createHtmlElementWithClass('label', labelClass);\r\n  label.id = `label${index}`;\r\n  label.textContent = description;\r\n  descriptionDiv.appendChild(label);\r\n\r\n  const text = createHtmlElementWithClass('input', ['task-input', 'hidden']);\r\n  text.setAttribute('type', 'text');\r\n  text.id = `description${index}`;\r\n  descriptionDiv.appendChild(text);\r\n\r\n  li.appendChild(descriptionDiv);\r\n\r\n  const iconsDiv = createHtmlElementWithClass('div', 'task-icons');\r\n\r\n  const deleteIcon = createHtmlElementWithClass('span', [\r\n    'material-icons',\r\n    'delete-icon',\r\n  ]);\r\n  deleteIcon.textContent = 'delete';\r\n  iconsDiv.appendChild(deleteIcon);\r\n\r\n  li.appendChild(iconsDiv);\r\n\r\n  return li;\r\n};\r\n\r\nexport default createListItem;\r\n","export default class Task {\r\n  constructor(description, index, estatus, id) {\r\n    this.description = description;\r\n    this.estatus = estatus;\r\n    this.index = index;\r\n    this.id = id;\r\n  }\r\n}\r\n","import Task from './_Task.js';\r\n\r\nexport default class ToDoList {\r\n  constructor() {\r\n    this.array = [];\r\n  }\r\n\r\n  add(description, estatus = false) {\r\n    const pos = this.array.length;\r\n    const task = new Task(description, pos, estatus, `id.${pos}`);\r\n    this.array.push(task);\r\n    this.reid();\r\n    this.set();\r\n  }\r\n\r\n  statusUpdate(index, newEstatus) {\r\n    this.array.forEach((element) => {\r\n      if (element.id === `id.${index}`) {\r\n        element.estatus = newEstatus;\r\n      }\r\n      this.set();\r\n    });\r\n  }\r\n\r\n  descriptionUpdate(index, description) {\r\n    this.array.forEach((element) => {\r\n      if (element.id === `id.${index}`) {\r\n        element.description = description;\r\n      }\r\n    });\r\n    this.set();\r\n  }\r\n\r\n  /* eslint-disable */\r\n  removeOnce(index) {\r\n    this.array = this.array.filter((element) => {\r\n      if (element.id !== `id.${index}`) {\r\n        return element;\r\n      }\r\n    });\r\n    this.reindex();\r\n    this.set();\r\n  }\r\n\r\n  removeCompleted() {\r\n    this.array = this.array.filter((element) => {\r\n      if (element.estatus === false) {\r\n        return element;\r\n      }\r\n    });\r\n    this.reindex();\r\n    this.reid();\r\n    this.set();\r\n  }\r\n  /* eslint-enable */\r\n\r\n  reindex() {\r\n    if (this.array.length > 0) {\r\n      this.array.forEach((element, index) => {\r\n        element.index = index;\r\n      });\r\n    }\r\n  }\r\n\r\n  reid() {\r\n    if (this.array.length > 0) {\r\n      this.array.forEach((element, index) => {\r\n        element.id = `id.${index}`;\r\n      });\r\n    }\r\n  }\r\n\r\n  set() {\r\n    localStorage.setItem('toDoList', JSON.stringify(this.array));\r\n  }\r\n\r\n  static get() {\r\n    if (!JSON.parse(localStorage.getItem('toDoList'))) {\r\n      this.array = [];\r\n    } else {\r\n      this.array = JSON.parse(localStorage.getItem('toDoList'));\r\n    }\r\n    return this.array;\r\n  }\r\n}\r\n","import './styles.scss';\r\nimport createListItem from './_createListItem.js';\r\nimport ToDoList from './_ToDoList.js';\r\n\r\n/**\r\n * *Variable declaration\r\n */\r\nconst newTask = document.querySelector('#todo-input');\r\nconst clearAllButton = document.querySelector('button');\r\nconst list = new ToDoList();\r\n\r\n/**\r\n * *Auxiliar function to empty a node\r\n * @param {HTMLElement} parentNode - to be emptied\r\n */\r\nconst removeAllChildrenNodes = (parentNode) => {\r\n  while (parentNode.firstChild) {\r\n    parentNode.removeChild(parentNode.firstChild);\r\n  }\r\n};\r\n\r\n/**\r\n * *Auxiliar function to update object's status on memory\r\n * @param {HTMLElement} checkbox - to check estatus\r\n * @param {HTMLElement} label - to be manipulated\r\n */\r\nfunction checkStatus(checkbox, label) {\r\n  checkbox.forEach((element, index) => {\r\n    element.addEventListener('change', () => {\r\n      list.statusUpdate(index, checkbox[index].checked);\r\n      if (checkbox[index].checked === true) {\r\n        label[index].classList.add('crossed');\r\n      } else {\r\n        label[index].classList.remove('crossed');\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * *Auxiliar function to toggle the same class between 2 different elements\r\n * @param {HTMLElement} elem1 - element to be added the new class\r\n * @param {HTMLElement} elem2 - element to be removed the class\r\n * @param {string} className - HTML class to interact\r\n */\r\nfunction toggleClassBetweenElements(elem1, elem2, className) {\r\n  elem1.classList.add(className);\r\n  elem2.classList.remove(className);\r\n}\r\n\r\n/**\r\n * *Function to render elements in HTML\r\n */\r\nfunction renderElements(object) {\r\n  const activitiesContainer = document.querySelector('#activities-container');\r\n  removeAllChildrenNodes(activitiesContainer);\r\n  object.forEach((task) => {\r\n    const activity = createListItem(task.description, task.estatus, task.index);\r\n    activitiesContainer.appendChild(activity);\r\n  });\r\n\r\n  const taskContainer = document.querySelectorAll('.task-container');\r\n  const checkbox = document.querySelectorAll('.checkbox');\r\n  const label = document.querySelectorAll('.task-label');\r\n  const text = document.querySelectorAll('.task-input');\r\n  const deleteIcon = document.querySelectorAll('.delete-icon');\r\n\r\n  checkStatus(checkbox, label);\r\n\r\n  /**\r\n   * *Inner function to save changes and return to previous state\r\n   * @param {number} index - row of elements to modify\r\n   */\r\n  function returnAndSave(index) {\r\n    label[index].textContent = text[index].value;\r\n    list.descriptionUpdate(index, text[index].value);\r\n    taskContainer[index].classList.remove('edit');\r\n    toggleClassBetweenElements(text[index], label[index], 'hidden');\r\n  }\r\n\r\n  /**\r\n   * *Auxiliar function to modify and save values on each task\r\n   */\r\n  label.forEach((element, index) => {\r\n    element.addEventListener('click', () => {\r\n      taskContainer[index].classList.add('edit');\r\n      toggleClassBetweenElements(label[index], text[index], 'hidden');\r\n      text[index].value = label[index].textContent;\r\n      text[index].focus();\r\n    });\r\n  });\r\n  text.forEach((element, index) => {\r\n    element.addEventListener('focusout', () => {\r\n      returnAndSave(index);\r\n    });\r\n    element.addEventListener('keyup', (e) => {\r\n      e.preventDefault();\r\n      if (e.code === 'Enter' && text[index].value.trim() !== '') {\r\n        returnAndSave(index);\r\n      }\r\n    });\r\n  });\r\n\r\n  /**\r\n   * *Auxiliar function to delete an element\r\n   */\r\n  deleteIcon.forEach((element, index) => {\r\n    element.addEventListener('click', () => {\r\n      activitiesContainer.removeChild(taskContainer[index]);\r\n      list.removeOnce(index);\r\n    });\r\n  });\r\n}\r\n\r\n/**\r\n * *Function to erase all completed elements\r\n */\r\nclearAllButton.addEventListener('click', () => {\r\n  list.removeCompleted();\r\n  renderElements(list.array);\r\n});\r\n\r\n/**\r\n * *Function to render elements stored in local storage\r\n */\r\nwindow.onload = function reload() {\r\n  if (ToDoList.get().length > 0) {\r\n    const memoryList = ToDoList.get();\r\n    memoryList.forEach((task) => {\r\n      list.add(task.description, task.estatus);\r\n    });\r\n    renderElements(list.array);\r\n  }\r\n};\r\n\r\n/**\r\n * *Function to add new task\r\n */\r\nnewTask.addEventListener('keyup', (e) => {\r\n  e.preventDefault();\r\n  if (e.code === 'Enter' && newTask.value.trim() !== '') {\r\n    list.add(newTask.value);\r\n    newTask.value = '';\r\n    renderElements(list.array);\r\n  }\r\n});\r\n"],"names":["createHtmlElementWithClass","tagName","className","tag","document","createElement","Array","isArray","classList","add","Task","description","index","estatus","id","this","ToDoList","array","pos","length","task","push","reid","set","newEstatus","forEach","element","filter","reindex","localStorage","setItem","JSON","stringify","parse","getItem","newTask","querySelector","clearAllButton","list","toggleClassBetweenElements","elem1","elem2","remove","renderElements","object","activitiesContainer","parentNode","firstChild","removeChild","removeAllChildrenNodes","activity","li","descriptionDiv","labelClass","checkbox","setAttribute","checked","appendChild","label","textContent","text","iconsDiv","deleteIcon","createListItem","taskContainer","querySelectorAll","returnAndSave","value","descriptionUpdate","addEventListener","statusUpdate","checkStatus","focus","e","preventDefault","code","trim","removeOnce","removeCompleted","window","onload","get"],"sourceRoot":""}