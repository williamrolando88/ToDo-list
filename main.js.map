{"version":3,"file":"main.js","mappings":"6HAMA,IAAMA,EAA6B,SAACC,EAASC,GAC3C,IAE8B,E,EAFxBC,EAAMC,SAASC,cAAcJ,GACnC,OAAKC,GACDI,MAAMC,QAAQL,IAChB,EAAAC,EAAIK,WAAUC,IAAd,Q,+CAAqBP,I,ikBAErBC,EAAIK,UAAUC,IAAIP,GAEbC,GANgBA,G,kGCRJO,EACnB,WAAYC,EAAaC,GAAwB,IAAjBC,EAAiB,kEAC/CC,KAAKH,YAAcA,EACnBG,KAAKD,QAAUA,EACfC,KAAKF,MAAQA,G,0KCDJG,EAAO,ICDCC,WACnB,c,4FAAc,SACZF,KAAKG,MAAQ,G,wCAGf,SAAIN,GACF,IAAMO,EAAO,IAAIR,EAAKC,EAAaG,KAAKG,MAAME,QAC9CL,KAAKG,MAAMG,KAAKF,GAChBJ,KAAKO,IAAIP,KAAKG,S,iBAIhB,SAAIK,GACFC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,M,iBAGlD,WACOG,KAAKE,MAAMJ,aAAaK,QAAQ,aAGnCd,KAAKG,MAAQQ,KAAKE,MAAMJ,aAAaK,QAAQ,aAF7Cd,KAAKG,MAAQ,K,0BAMjB,SAAaL,EAAOiB,GAClBf,KAAKG,MAAML,GAAOC,QAAUgB,EAC5Bf,KAAKO,IAAIP,KAAKG,Y,mBA1BGD,IDErBD,EAAKN,IAAI,mBACTM,EAAKN,IAAI,kBACTM,EAAKN,IAAI,gBACTM,EAAKN,IAAI,sBACTM,EAAKN,IAAI,uBACTM,EAAKN,IAAI,kBEFT,WACE,IAAMqB,EAAsB1B,SAAS2B,cAAc,yBACnDhB,EAAKE,MAAMe,SAAQ,SAACd,GAClB,IAAMe,EJaa,SAACtB,EAAaE,EAASD,GAC5C,IAAMsB,EAAKlC,EAA2B,KAAM,kBAC5CkC,EAAGC,aAAa,KAAhB,cAA6BvB,IAE7B,IAAMwB,EAAiBpC,EAA2B,MAAO,oBAEnDqC,EAAWrC,EAA2B,QAAS,YACrDqC,EAASF,aAAa,OAAQ,YAC9BE,EAASC,QAAUzB,EACnBwB,EAASF,aAAa,OAAtB,kBAAyCvB,IACzCyB,EAASE,GAAT,kBAAyB3B,GACzBwB,EAAeI,YAAYH,GAE3B,IAAMI,EAAQzC,EAA2B,QAAS,cAClDyC,EAAMN,aAAa,MAAnB,kBAAqCvB,IACrC6B,EAAMC,YAAc/B,EACpByB,EAAeI,YAAYC,GAE3B,IAAME,EAAO3C,EAA2B,QAAS,CAAC,aAAc,WAChE2C,EAAKR,aAAa,OAAQ,QAC1BQ,EAAKJ,GAAL,qBAAwB3B,GACxBwB,EAAeI,YAAYG,GAE3BT,EAAGM,YAAYJ,GAEf,IAAMQ,EAAW5C,EAA2B,MAAO,cAE7C6C,EAAgB7C,EAA2B,OAAQ,CACvD,iBACA,cAEF6C,EAAcH,YAAc,YAC5BE,EAASJ,YAAYK,GAErB,IAAMC,EAAa9C,EAA2B,OAAQ,CACpD,iBACA,cACA,WAOF,OALA8C,EAAWJ,YAAc,SACzBE,EAASJ,YAAYM,GAErBZ,EAAGM,YAAYI,GAERV,EIzDYa,CAAe7B,EAAKP,YAAaO,EAAKL,QAASK,EAAKN,OACrEkB,EAAoBU,YAAYP,MAGlC,IAAMI,EAAWjC,SAAS4C,iBAAiB,aACrCP,EAAQrC,SAAS4C,iBAAiB,eACxCX,EAASL,SAAQ,SAACV,EAASV,GACzBU,EAAQ2B,iBAAiB,UAAU,WACjClC,EAAKmC,aAAatC,EAAOyB,EAASzB,GAAO0B,UACT,IAA5BD,EAASzB,GAAO0B,QAClBG,EAAM7B,GAAOJ,UAAUC,IAAI,WAE3BgC,EAAM7B,GAAOJ,UAAU2C,OAAO,iBAKtCC,I","sources":["webpack://todo-list/./src/_createListItem.js","webpack://todo-list/./src/_Task.js","webpack://todo-list/./src/_list.js","webpack://todo-list/./src/_ToDoList.js","webpack://todo-list/./src/index.js"],"sourcesContent":["/**\n * * Function to create HTMLElement with class\n * @param {string} tag - HTML tag name\n * @param {(string|[string])} className - HTML class for the element\n * @returns {HTMLElement}\n */\nconst createHtmlElementWithClass = (tagName, className) => {\n  const tag = document.createElement(tagName);\n  if (!className) return tag;\n  if (Array.isArray(className)) {\n    tag.classList.add(...className);\n  } else {\n    tag.classList.add(className);\n  }\n  return tag;\n};\n\n/**\n * *Function to render each task\n * @param {string} description - description of the activity\n * @param {number} index - number in the task array\n * @returns {HTMLElement}\n */\nconst createListItem = (description, estatus, index) => {\n  const li = createHtmlElementWithClass('li', 'task-container');\n  li.setAttribute('id', `toDo${index}`);\n\n  const descriptionDiv = createHtmlElementWithClass('div', 'task-description');\n\n  const checkbox = createHtmlElementWithClass('input', 'checkbox');\n  checkbox.setAttribute('type', 'checkbox');\n  checkbox.checked = estatus;\n  checkbox.setAttribute('name', `checkbox${index}`);\n  checkbox.id = `checkbox${index}`;\n  descriptionDiv.appendChild(checkbox);\n\n  const label = createHtmlElementWithClass('label', 'task-label');\n  label.setAttribute('for', `checkbox${index}`);\n  label.textContent = description;\n  descriptionDiv.appendChild(label);\n\n  const text = createHtmlElementWithClass('input', ['task-input', 'hidden']);\n  text.setAttribute('type', 'text');\n  text.id = `description${index}`;\n  descriptionDiv.appendChild(text);\n\n  li.appendChild(descriptionDiv);\n\n  const iconsDiv = createHtmlElementWithClass('div', 'task-icons');\n\n  const dragIndicator = createHtmlElementWithClass('span', [\n    'material-icons',\n    'drag-icon',\n  ]);\n  dragIndicator.textContent = 'more_vert';\n  iconsDiv.appendChild(dragIndicator);\n\n  const deleteIcon = createHtmlElementWithClass('span', [\n    'material-icons',\n    'delete-icon',\n    'hidden',\n  ]);\n  deleteIcon.textContent = 'delete';\n  iconsDiv.appendChild(deleteIcon);\n\n  li.appendChild(iconsDiv);\n\n  return li;\n};\n\nexport default createListItem;\n","export default class Task {\n  constructor(description, index, estatus = false) {\n    this.description = description;\n    this.estatus = estatus;\n    this.index = index;\n  }\n}\n","import ToDoList from './_ToDoList.js';\n\n/* eslint-disable */\nexport const list = new ToDoList();\nlist.add('Wash the dishes');\nlist.add('Do the laundry');\nlist.add('Walk the dog');\nlist.add('Buy the grocceries');\nlist.add('Meet aunt at six pm');\nlist.add('Submit project');\n","import Task from './_Task.js';\n\nexport default class ToDoList {\n  constructor() {\n    this.array = [];\n  }\n\n  add(description) {\n    const task = new Task(description, this.array.length);\n    this.array.push(task);\n    this.set(this.array);\n  }\n\n  /* eslint-disable */\n  set(element) {\n    localStorage.setItem('toDoList', JSON.stringify(element));\n  }\n\n  get() {\n    if (!JSON.parse(localStorage.getItem('toDoList'))) {\n      this.array = [];\n    } else {\n      this.array = JSON.parse(localStorage.getItem('toDoList'));\n    }\n  }\n\n  statusUpdate(index, newEstatus) {\n    this.array[index].estatus = newEstatus;\n    this.set(this.array);\n  }\n}\n","import './styles.scss';\nimport createListItem from './_createListItem.js';\nimport { list } from './_list.js';\n\n/**\n * *Function to render elements in HTML\n */\nfunction renderElements() {\n  const activitiesContainer = document.querySelector('#activities-container');\n  list.array.forEach((task) => {\n    const activity = createListItem(task.description, task.estatus, task.index);\n    activitiesContainer.appendChild(activity);\n  });\n\n  const checkbox = document.querySelectorAll('.checkbox');\n  const label = document.querySelectorAll('.task-label');\n  checkbox.forEach((element, index) => {\n    element.addEventListener('change', () => {\n      list.statusUpdate(index, checkbox[index].checked);\n      if (checkbox[index].checked === true) {\n        label[index].classList.add('crossed');\n      } else {\n        label[index].classList.remove('crossed');\n      }\n    });\n  });\n}\nrenderElements();\n"],"names":["createHtmlElementWithClass","tagName","className","tag","document","createElement","Array","isArray","classList","add","Task","description","index","estatus","this","list","ToDoList","array","task","length","push","set","element","localStorage","setItem","JSON","stringify","parse","getItem","newEstatus","activitiesContainer","querySelector","forEach","activity","li","setAttribute","descriptionDiv","checkbox","checked","id","appendChild","label","textContent","text","iconsDiv","dragIndicator","deleteIcon","createListItem","querySelectorAll","addEventListener","statusUpdate","remove","renderElements"],"sourceRoot":""}