{"version":3,"file":"main.js","mappings":"qHAAqBA,EACnB,WAAYC,EAAaC,GAAwB,IAAjBC,EAAiB,kEAC/CC,KAAKH,YAAcA,EACnBG,KAAKD,QAAUA,EACfC,KAAKF,MAAQA,G,gRCEjB,IAAMG,EAA6B,SAACC,EAASC,GAC3C,IAE8B,E,EAFxBC,EAAMC,SAASC,cAAcJ,GACnC,OAAKC,GACDI,MAAMC,QAAQL,IAChB,EAAAC,EAAIK,WAAUC,IAAd,Q,+CAAqBP,I,ikBAErBC,EAAIK,UAAUC,IAAIP,GAEbC,GANgBA,GCHzB,IAYQO,EAZFC,EAAO,ICHQC,WACnB,c,4FAAc,SACZb,KAAKc,MAAQ,G,wCAGf,SAAIjB,GACF,IAAMkB,EAAO,IAAInB,EAAKC,EAAaG,KAAKc,MAAME,QAC9ChB,KAAKc,MAAMG,KAAKF,GAChBf,KAAKkB,IAAIlB,KAAKc,S,iBAGhB,SAAIK,GACFC,aAAaC,QAAQ,WAAYC,KAAKC,UAAUJ,M,iBAGlD,WACOG,KAAKE,MAAMJ,aAAaK,QAAQ,aAGnCzB,KAAKc,MAAQQ,KAAKE,MAAMJ,aAAaK,QAAQ,aAF7CzB,KAAKc,MAAQ,Q,mBAjBED,IDIrBD,EAAKF,IAAI,mBACTE,EAAKF,IAAI,kBAUDC,EAAsBN,SAASqB,cAAc,yBACnDd,EAAKE,MAAMa,SAAQ,SAACZ,GAClB,IAAMa,EDIa,SAAC/B,EAAaE,EAASD,GAC5C,IAAM+B,EAAK5B,EAA2B,KAAM,kBAC5C4B,EAAGC,aAAa,KAAhB,cAA6BhC,IAE7B,IAAMiC,EAAiB9B,EAA2B,MAAO,oBAEnD+B,EAAW/B,EAA2B,QAAS,YACrD+B,EAASF,aAAa,OAAQ,YAC9BE,EAASC,QAAUlC,EACnBiC,EAASF,aAAa,OAAtB,kBAAyChC,IACzCkC,EAASE,GAAT,kBAAyBpC,GACzBiC,EAAeI,YAAYH,GAE3B,IAAMI,EAAQnC,EAA2B,QAAS,cAClDmC,EAAMN,aAAa,MAAnB,kBAAqChC,IACrCsC,EAAMC,YAAcxC,EACpBkC,EAAeI,YAAYC,GAE3B,IAAME,EAAOrC,EAA2B,QAAS,CAAC,aAAc,WAChEqC,EAAKR,aAAa,OAAQ,QAC1BQ,EAAKJ,GAAL,qBAAwBpC,GACxBiC,EAAeI,YAAYG,GAE3BT,EAAGM,YAAYJ,GAEf,IAAMQ,EAAWtC,EAA2B,MAAO,cAE7CuC,EAAgBvC,EAA2B,OAAQ,CACvD,iBACA,cAEFuC,EAAcH,YAAc,YAC5BE,EAASJ,YAAYK,GAErB,IAAMC,EAAaxC,EAA2B,OAAQ,CACpD,iBACA,cACA,WAOF,OALAwC,EAAWJ,YAAc,SACzBE,EAASJ,YAAYM,GAErBZ,EAAGM,YAAYI,GAERV,EChDYa,CAAe3B,EAAKlB,YAAakB,EAAKhB,QAASgB,EAAKjB,OACrEa,EAAoBwB,YAAYP,GACfvB,SAASqB,cAAc,iB","sources":["webpack://todo-list/./src/_Task.js","webpack://todo-list/./src/_createListItem.js","webpack://todo-list/./src/index.js","webpack://todo-list/./src/_ToDoList.js"],"sourcesContent":["export default class Task {\n  constructor(description, index, estatus = false) {\n    this.description = description;\n    this.estatus = estatus;\n    this.index = index;\n  }\n}\n","/**\n * * Function to create HTMLElement with class\n * @param {string} tag - HTML tag name\n * @param {(string|[string])} className - HTML class for the element\n * @returns {HTMLElement}\n */\nconst createHtmlElementWithClass = (tagName, className) => {\n  const tag = document.createElement(tagName);\n  if (!className) return tag;\n  if (Array.isArray(className)) {\n    tag.classList.add(...className);\n  } else {\n    tag.classList.add(className);\n  }\n  return tag;\n};\n\n/**\n * *Function to render each task\n * @param {string} description - description of the activity\n * @param {number} index - number in the task array\n * @returns {HTMLElement}\n */\nconst createListItem = (description, estatus, index) => {\n  const li = createHtmlElementWithClass('li', 'task-container');\n  li.setAttribute('id', `toDo${index}`);\n\n  const descriptionDiv = createHtmlElementWithClass('div', 'task-description');\n\n  const checkbox = createHtmlElementWithClass('input', 'checkbox');\n  checkbox.setAttribute('type', 'checkbox');\n  checkbox.checked = estatus;\n  checkbox.setAttribute('name', `checkbox${index}`);\n  checkbox.id = `checkbox${index}`;\n  descriptionDiv.appendChild(checkbox);\n\n  const label = createHtmlElementWithClass('label', 'task-label');\n  label.setAttribute('for', `checkbox${index}`);\n  label.textContent = description;\n  descriptionDiv.appendChild(label);\n\n  const text = createHtmlElementWithClass('input', ['task-input', 'hidden']);\n  text.setAttribute('type', 'text');\n  text.id = `description${index}`;\n  descriptionDiv.appendChild(text);\n\n  li.appendChild(descriptionDiv);\n\n  const iconsDiv = createHtmlElementWithClass('div', 'task-icons');\n\n  const dragIndicator = createHtmlElementWithClass('span', [\n    'material-icons',\n    'drag-icon',\n  ]);\n  dragIndicator.textContent = 'more_vert';\n  iconsDiv.appendChild(dragIndicator);\n\n  const deleteIcon = createHtmlElementWithClass('span', [\n    'material-icons',\n    'delete-icon',\n    'hidden',\n  ]);\n  deleteIcon.textContent = 'delete';\n  iconsDiv.appendChild(deleteIcon);\n\n  li.appendChild(iconsDiv);\n\n  return li;\n};\n\nexport default createListItem;\n","import './styles.scss';\nimport ToDoList from './_ToDoList.js';\nimport { checkbox } from './_checkbox.js';\nimport createListItem from './_createListItem.js';\n\nconst list = new ToDoList();\nlist.add('Wash the dishes');\nlist.add('Do the laundry');\n// list.add('Walk the dog');\n// list.add('Buy the grocceries');\n// list.add('Meet aunt at six pm');\n// list.add('Submit project');\n\n/**\n * *Function to render elements in HTML\n */\nfunction renderElements() {\n  const activitiesContainer = document.querySelector('#activities-container');\n  list.array.forEach((task) => {\n    const activity = createListItem(task.description, task.estatus, task.index);\n    activitiesContainer.appendChild(activity);\n    const checkbox = document.querySelector('.checkbox');\n    // console.log(checkbox.checked);\n  });\n}\nrenderElements();\n","import Task from './_Task.js';\n\nexport default class ToDoList {\n  constructor() {\n    this.array = [];\n  }\n\n  add(description) {\n    const task = new Task(description, this.array.length);\n    this.array.push(task);\n    this.set(this.array);\n  }\n\n  set(element) {\n    localStorage.setItem('toDoList', JSON.stringify(element));\n  }\n\n  get() {\n    if (!JSON.parse(localStorage.getItem('toDoList'))) {\n      this.array = [];\n    } else {\n      this.array = JSON.parse(localStorage.getItem('toDoList'));\n    }\n  }\n}\n"],"names":["Task","description","index","estatus","this","createHtmlElementWithClass","tagName","className","tag","document","createElement","Array","isArray","classList","add","activitiesContainer","list","ToDoList","array","task","length","push","set","element","localStorage","setItem","JSON","stringify","parse","getItem","querySelector","forEach","activity","li","setAttribute","descriptionDiv","checkbox","checked","id","appendChild","label","textContent","text","iconsDiv","dragIndicator","deleteIcon","createListItem"],"sourceRoot":""}